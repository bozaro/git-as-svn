buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0"
    classpath "org.ajoberstar:gradle-git:0.9.0"
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "2.0"
}

repositories {
  mavenCentral()
}

apply plugin: "license"
apply plugin: "idea"
apply plugin: "java"
apply plugin: "project-report"

license {
  header rootProject.file('license_header.txt')
  exclude "src/test/resources/svnserver"
}

dependencies {
  compile "org.jetbrains:annotations:13.0"
  compile "org.eclipse.jgit:org.eclipse.jgit:3.6.2.201501210735-r"
  compile "org.tmatesoft.svnkit:svnkit:1.8.5"
  compile "org.yaml:snakeyaml:1.14"
  compile "org.slf4j:slf4j-simple:1.7.7"
  compile "com.beust:jcommander:1.35"
  compile "commons-io:commons-io:2.4"
  compile "org.ini4j:ini4j:0.5.2"
  compile "org.atteo.classindex:classindex:3.1"
  compile "org.mapdb:mapdb:1.0.6"
  compile "com.unboundid:unboundid-ldapsdk:2.3.8"

  testCompile "org.apache.directory.server:apacheds-protocol-ldap:2.0.0-M19"
  testCompile "org.apache.directory.api:api-ldap-codec-standalone:1.0.0-M26"
  testCompile "org.testng:testng:6.8.8"
}

sourceCompatibility = JavaVersion.VERSION_1_8

idea {
  project {
    jdkName = sourceCompatibility.name
    languageLevel = sourceCompatibility.name
  }
  module {
    jdkName = sourceCompatibility.name
    downloadJavadoc = true
    downloadSources = true
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

test {
  useTestNG()
  maxHeapSize = "384m"
  ignoreFailures = "$testIgnoreFailures".toBoolean()
}

jar {
  manifest {
    attributes(
        "Main-Class": "svnserver.server.Main",
        "Class-Path": "${-> createLauncherClassPath()}"
    )
  }
}

processResources {
  expand([
      "revision": org.ajoberstar.grgit.Grgit.open(project.file(rootProject.projectDir)).head().id,
      "tag"     : (System.getenv("TRAVIS_TAG") ?: ""),
  ])
}

task deployJars(dependsOn: jar) << {
  def projectArtifacts = configurations.archives.artifacts*.file
  def fullArtifacts = configurations.archives.artifacts*.file + configurations.runtime.files
  copy {
    from fullArtifacts.intersect(projectArtifacts)
    from "config.example"
    from "README.md"
    from "LICENSE"
    from "launcher"
    from "launcher.bat"
    from "launcher.ps1"
    from "launcher.cfg"
    from "launcher.vmoptions"
    into "${project.buildDir}/deploy"
  }
  copy {
    from fullArtifacts.minus(projectArtifacts)
    into "${project.buildDir}/deploy/vendors"
  }
}

task deployZip(type: Zip, dependsOn: deployJars) {
  from "build/deploy"
}

def createLauncherClassPath() {
  def projectArtifacts = configurations.archives.artifacts*.file
  def fullArtifacts = configurations.archives.artifacts*.file + configurations.runtime.files
  def vendorJars = fullArtifacts.minus(projectArtifacts).collect { "vendors/${it.name}" }
  return vendorJars.join(" ")
}
